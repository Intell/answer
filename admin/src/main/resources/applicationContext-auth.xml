<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       default-lazy-init="true">
    <description>Apache Shiro 配置</description>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
            depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="shiroSecurityManager"/>
    </bean>

    <bean id="credentialsMatcher" class="com.intell.lesson.auth.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="SHA-256"/>
        <property name="hashIterations" value="1024"/>
        <property name="storedCredentialsHexEncoded" value="false"/>
        <property name="maxRetry" value="20"/>
    </bean>


    <!-- 自定义的Realm -->
    <bean id="authenticationRealm" class="com.intell.lesson.auth.realm.MysqlAuthorizationRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="authorizationCacheName" value="author-Cache"/>
        <property name="defaultPermissionString" value="security:change-password,security:index"/>
    </bean>


    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>

    <!--使用Shiro的内置 Native session manager,保证session与web 容器无关-->
    <bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--初始化session过期时间为30分钟，以毫秒为到位 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="sessionDAO">
            <bean class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
                <property name="activeSessionsCacheName" value="session-Cache"/>
            </bean>
        </property>
        <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
        <property name="sessionIdCookie">
            <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                <!-- cookie的name,对应的默认是 JSESSIONID -->
                <constructor-arg name="name" value="SHAREJSESSIONID"/>
            </bean>
        </property>
        <!-- 定时检查失效的session -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
    </bean>


    <!-- 使用默认的WebSecurityManager -->
    <bean id="shiroSecurityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="authenticationRealm"/>
        <!--<property name="cacheManager" ref="shiroCacheManager"/>-->
        <property name="sessionManager" ref="shiroSessionManager"/>
        <!-- 自定义的rememberMeManager -->
        <property name="rememberMeManager">
            <bean class="com.intell.lesson.auth.realm.CustomRememberMeManager"/>
        </property>
    </bean>


    <!-- 自定义对 shiro的连接约束,结合shiroSecurityFilter实现动态获取资源 -->
    <bean id="filterChainBean" class="com.intell.lesson.auth.filter.FilterChainBeanFactory">
        <!-- 默认的连接配置 -->
        <property name="iniResourcePath" value="classpath:conf/shiro.ini"/>
    </bean>
    <!-- 将shiro与spring集合 -->
    <bean id="shiroSecurityFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="filters">
            <map>
                <entry key="captchaAuthc" value-ref="captchaAuthenticationFilter"/>
            </map>
        </property>
        <!-- shiro的核心安全接口 -->
        <property name="securityManager" ref="shiroSecurityManager"/>
        <!-- 要求登录时的链接 该连接是com.inteliTech.auth.controller.authController.login()方法-->
        <property name="loginUrl" value="/login"/>
        <!-- 登陆成功后要跳转的连接，该连接是com.inteliTech.auth.controller.authController.index()方法 -->
        <property name="successUrl" value="/template"/>
        <!-- 没有权限要跳转的链接 该连接是com.inteliTech.auth.controller.authController.unauthorized()方法 -->
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!-- shiro连接约束配置,在这里使用自定义的动态获取资源类 -->
        <property name="filterChainDefinitionMap" ref="filterChainBean"/>
    </bean>



</beans>
